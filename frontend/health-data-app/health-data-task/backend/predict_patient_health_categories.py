# -*- coding: utf-8 -*-
"""Predict_Patient_Health_Categories.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16RC2gReNR8VDdmc0Y69o7u1wrjmCPKQN
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, f1_score, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
data = pd.read_json("dataset.json")

# Check dataset info
print("Dataset Info:")
print(data.info())
print("\nMissing Values in Raw Columns:")
print(data.isnull().sum())

# Feature engineering
# Extract average heart rate from vitals.heart_rate
data["heart_rate_avg"] = data["vitals"].apply(
    lambda x: np.mean(x.get("heart_rate", [0])) if isinstance(x.get("heart_rate"), list) else 0
)
# Extract steps from activity
data["steps"] = data["activity"].apply(lambda x: x.get("steps", 0))
# Extract sleep duration from sleep
data["sleep_hours"] = data["sleep"].apply(lambda x: x.get("duration_hours", 0))
# Extract calories from nutrition
data["calories"] = data["nutrition"].apply(lambda x: x.get("calories", 0))

# Check missing values in extracted features
print("\nMissing Values in Extracted Features:")
print(data[["heart_rate_avg", "steps", "sleep_hours", "calories"]].isnull().sum())

# Handle missing values ((if any))
# Option 1: Fill with mean for numeric columns
data["heart_rate_avg"] = data["heart_rate_avg"].fillna(data["heart_rate_avg"].mean())
data["steps"] = data["steps"].fillna(data["steps"].mean())
data["sleep_hours"] = data["sleep_hours"].fillna(data["sleep_hours"].mean())
data["calories"] = data["calories"].fillna(data["calories"].mean())

# Define health status based on thresholds
def label_health(row):
    hr = row["heart_rate_avg"]
    steps = row["steps"]
    sleep = row["sleep_hours"]
    if hr < 60 or hr > 100 or steps < 5000 or sleep < 6:
        return "Poor"
    elif hr < 70 or hr > 90 or steps < 7000 or sleep < 7:
        return "Moderate"
    return "Good"

data["health_status"] = data.apply(label_health, axis=1)

# Prepare features and target
features = ["heart_rate_avg", "steps", "sleep_hours", "calories"]
X = data[features]
y = data["health_status"]

# Split data
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# Scale features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train Decision Tree
dt_model = DecisionTreeClassifier(random_state=42)
dt_model.fit(X_train_scaled, y_train)
dt_pred = dt_model.predict(X_test_scaled)

# Train Random Forest
rf_model = RandomForestClassifier(random_state=42, n_estimators=100)
rf_model.fit(X_train_scaled, y_train)
rf_pred = rf_model.predict(X_test_scaled)

# Evaluate models
print("\nDecision Tree Results:")
print(f"Accuracy: {accuracy_score(y_test, dt_pred):.2f}")
print(f"F1-Score: {f1_score(y_test, dt_pred, average='weighted'):.2f}")
print("\nClassification Report:")
print(classification_report(y_test, dt_pred))

print("\nRandom Forest Results:")
print(f"Accuracy: {accuracy_score(y_test, rf_pred):.2f}")
print(f"F1-Score: {f1_score(y_test, rf_pred, average='weighted'):.2f}")
print("\nClassification Report:")
print(classification_report(y_test, rf_pred))

# Feature importance visualization
plt.figure(figsize=(10, 6))
sns.barplot(x=rf_model.feature_importances_, y=features)
plt.title("Feature Importance (Random Forest)")
plt.xlabel("Importance")
plt.ylabel("Feature")
plt.tight_layout()
plt.savefig("feature_importance.png")
plt.close()